<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KitwahSin&#39;s Blob</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blob.kitwahsin.cn/"/>
  <updated>2020-04-27T09:49:24.585Z</updated>
  <id>https://blob.kitwahsin.cn/</id>
  
  <author>
    <name>KitwahSin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins+GitLab实现持续集成</title>
    <link href="https://blob.kitwahsin.cn/2020/04/27/Jenkins-GitLab%E5%AE%9E%E7%8E%B0%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>https://blob.kitwahsin.cn/2020/04/27/Jenkins-GitLab%E5%AE%9E%E7%8E%B0%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</id>
    <published>2020-04-26T17:11:48.000Z</published>
    <updated>2020-04-27T09:49:24.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>阿里云 Centos7 双核8G，并且这是在Docker上进行的</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker # 安装docker</span><br><span class="line">systemctl start docker # 启动docker</span><br><span class="line">docker search jenkins# 搜索</span><br><span class="line">docker pull jenkins/jenkins:lts# 安装镜像（建议到官网找最新的版本，否则可能出现其他问题）</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前用户下创建文件夹jenkins</span></span><br><span class="line">mkdir jenkins</span><br><span class="line">chmod -R 777 jenkins</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行(docker指令自行百度)</span></span><br><span class="line">docker run -itd -p 8091:8080 -p 8092:50000 --name jenkins --privileged=true -v ~/jenkins/:/var/jenkins_home jenkins</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行状态</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行结果</span></span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                             NAMES</span><br><span class="line">54f487e8570b        jenkins               "/bin/tini -- /usr/l…"   7 minutes ago       Up 59 seconds       0.0.0.0:8091-&gt;8080/tcp, 0.0.0.0:8092-&gt;50000/tcp   jenkins</span><br></pre></td></tr></table></figure><h2 id="首次运行配置"><a href="#首次运行配置" class="headerlink" title="首次运行配置"></a>首次运行配置</h2><ol><li>配置密码</li></ol><p>首次进入系统时会显示此界面，密码在<code>jenkins/secrets/initialAdminPassword</code>文件里，当设置好密码后，此文件会被删除</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200417220707821.png" alt="image-20200417220707821"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/jenkins/secrets/initialAdminPassword# 获取密码</span><br></pre></td></tr></table></figure><ol start="2"><li>安装插件</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200417221232314.png" alt="image-20200417221232314"></p><p>此处选择安装推荐的插件即可</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200417221401932.png" alt="image-20200417221401932"></p><ol start="3"><li>设置用户与密码</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200417225601957.png" alt="image-20200417225601957"></p><p>设置完成后就基本配置完成了。以后使用当前设置的账户即可登陆。</p><h2 id="配置环境与服务器"><a href="#配置环境与服务器" class="headerlink" title="配置环境与服务器"></a>配置环境与服务器</h2><ol><li>配置JDK与Gradle</li></ol><p>打开Manage Jenkins -&gt; Global Tool Configuration，然后看到JDK和Gradle并点击Installtion并进行配置。在此处我选择了安装Sum的JDK8和Gradle 6.0，因为我的项目是使用Gradle进行打包的。我们也可以根据路径指定当前系统中JDK、Maven等。</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425002243025.png" alt="image-20200425002243025"></p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425002257686.png" alt="image-20200425002257686"></p><ol start="2"><li>添加SSH服务器</li></ol><p>进入Manage Jenkins -&gt; System Configuration并找到Publish over SSH -&gt; SSH Servers选项，点击Add并进行配置。这个服务器在这里是作为打包测试通过之后发布的服务器。</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425002832843.png" alt="image-20200425002832843"></p><p>填写完成后点击Test Configuration进行测试，看是否能够连接成功。</p><h2 id="创建第一个项目"><a href="#创建第一个项目" class="headerlink" title="创建第一个项目"></a>创建第一个项目</h2><ol><li>点击主页面的New Item，填入名字并选择Freestyle project。</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425003208597.png" alt="image-20200425003208597"></p><ol start="2"><li>配置代码获取的方式，此处输入代码仓库的地址和账号等信息。同时还可以指定跟踪的分支，例如develop分支或者是master分支。</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425003607177.png" alt="image-20200425003607177"></p><ol start="3"><li><p>配置触发自动部署的条件，当达到一定的条件之后就可以触发Jenkins获取最新的代码进行打包、测试、部署等。因为我的GitLab服务器是能够访问到Jenkins服务器的，所以我选择在上传代码之后，通过Webhook触发部署。同时在此处点击Generate生成Secret token, 待会配置到GitLab服务器中。</p><blockquote><p>Jenkin支持的几种触发方式：</p><ol><li>通过远程触发(Trigger builds remotely)</li><li>在其他项目构建完成后出发(build after other projects are built)</li><li>周期性地进行检查(build periodically)</li><li>通过webhook进行触发(build when a change is pushed to GitLab)</li><li>定时检查源码变更情况，如有变更则触发(poll SCM)</li></ol></blockquote></li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004218750.png" alt="image-20200425004218750"></p><ol start="4"><li>配置打包的过程，可以通过执行Shell命令、调用Gradle脚本等进行打包。我这里使用的是Gradle脚本进行打包的。</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004241365.png" alt="image-20200425004241365"></p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004316870.png" alt="image-20200425004316870"></p><ol start="5"><li>最后可以配置打包成后所执行的步骤，此处配置的是打包测试成功后通过SSH发布。所以选择Send build artifacts over SSH。在SSH Server中选择刚刚配置的SSH Server即可。同时在transfer配置源文件等。这样在Jenkins中就已经配置完成了。</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004403298.png" alt="image-20200425004403298"></p><blockquote><p>Transfer Set</p><p>Source files: 指打包后需要发布的War包或者是Jar包</p><p>Remove prefix: 在Source files中，倘若填写的是/test/xx.jar，如果传到SSH服务器上指定的目录下，会自动创建test文件夹，并且xx.jar文件在test文件夹下。移除前缀就可以不用创建test文件夹</p><p>Remote directory: 登陆SSH后进入的目录</p><p>Exec command: 传输完文件后需要执行的命令</p></blockquote><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004457290.png" alt="image-20200425004457290"></p><ol start="6"><li>配置GitLab中的WebHook，进入项目的Setting -&gt; Intergrations 界面，填入配置Build Trigger中显示的URL与Secret Token，同时在下面选择触发条件。这个触发条件就是在什么条件下触发WebHook。</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004613435.png" alt="image-20200425004613435"></p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004730148.png" alt=""></p><p>填写完成后点击Add webhook即可出现下面显示的一个条目。</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004838397.png" alt="image-20200425004838397"></p><p>点击Test下拉按钮能够显示多个事件，这个可以模拟上传代码、合并代码事件。这样就能够测试我们是否在上传的时候触发Jenkins的打包功能。</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004855352.png" alt="image-20200425004855352"></p><p>如果成功了，点击Edit按钮滑动到底部，会看到一些回调信息已经发送成功的记录。当然，还是直接查看Jenkins是否已经触发了打包过程。我在测试的过程中就尝试过了，这里已经出现200的状态码，但是并没有触发打包。就是因为我在Jenkins配置的时候设置了一些过滤规则，过滤掉了。</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425005010500.png" alt="image-20200425005010500"></p><p>参考：</p><p><a href="https://blog.csdn.net/anzhuo5151/article/details/101786217?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">jenkins各种触发方式介绍</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;阿里云 Centos7 双核8G，并且这是在Docker上进行的&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
