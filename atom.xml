<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KitwahSin&#39;s Blob</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blob.kitwahsin.cn/"/>
  <updated>2020-04-28T17:59:10.598Z</updated>
  <id>https://blob.kitwahsin.cn/</id>
  
  <author>
    <name>KitwahSin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态规划算法学习——01背包</title>
    <link href="https://blob.kitwahsin.cn/2020/04/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%9401%E8%83%8C%E5%8C%85/"/>
    <id>https://blob.kitwahsin.cn/2020/04/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%9401%E8%83%8C%E5%8C%85/</id>
    <published>2020-04-27T18:17:43.000Z</published>
    <updated>2020-04-28T17:59:10.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文章主要是为了学习动态规划算法问题，这首先是进行对01背包问题进行学习。01背包问题是DP算法的基础，其他的完全背包都是从此基础上进行演进的。</p><p>对于01背包，有一个十分明显的特点：每件物品只可以操作一次，可以选择放与不放。</p><blockquote><p>题目：有N件物品和一个容量为V的背包，放入第i件物品消耗的容量为Ci，可以获得的价值为Wi，求最大的价值总和。</p><p>F[i,v]代表前i件物品放入容量为v的背包可以获得的最大价值。因此可以得到转移方程为<code>F[i, v] =  max{F[i - 1, v], F[i - 1, v - Ci] + Wi}</code></p><p>可以得到伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F[0,0..V] &lt;- 0</span><br><span class="line">for i &lt;- 1 to N</span><br><span class="line">for v &lt;- Ci to V</span><br><span class="line">F[i, v] &lt;- max&#123;F[i - 1, v], F[i - 1,v - Ci] + Wi&#125;</span><br></pre></td></tr></table></figure><p>此处建议查看《背包九讲》</p></blockquote><h2 id="LeetCode416-分割等和子集"><a href="#LeetCode416-分割等和子集" class="headerlink" title="LeetCode416-分割等和子集"></a>LeetCode416-<a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/" target="_blank" rel="noopener">分割等和子集</a></h2><blockquote><p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p>注意:</p><p>每个数组中的元素不会超过 100<br>数组的大小不会超过 200<br>示例 1:</p><p>输入: [1, 5, 11, 5]</p><p>输出: true</p><p>解释: 数组可以分割成 [1, 5, 5] 和 [11].</p><p>示例 2:</p><p>输入: [1, 2, 3, 5]</p><p>输出: false</p><p>解释: 数组不能分割成两个元素和相等的子集.</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>这道题的难度在于如何初始化数组。在背包问题中，有容量V，最大价值F，和第i件物品价值Wi与耗费Ci。从题目可以得知，容量V的大小是数组之和sum除于2。而本题中，容量V与价值F是相等的，并且每件物品的价值W和耗费C是相等的。</li><li>考虑边界条件：<ol><li>当数组大小为0的时候，直接返回false</li><li>当sum/2为奇数的时候，直接返回false</li></ol></li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 边界条件1</span></span><br><span class="line">  <span class="keyword">if</span>(nums.length == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">// 根据题目得知最大总和为 100*200=20000，因此使用int即可</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n: nums) &#123;</span><br><span class="line">      sum += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 边界条件2</span></span><br><span class="line">    <span class="keyword">if</span>((sum &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> v = sum / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> dp = <span class="keyword">new</span> <span class="keyword">int</span>[v + <span class="number">1</span>];<span class="comment">// 初始化背包，开始全部为0</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;<span class="comment">// 遍历所有的物品</span></span><br><span class="line">      <span class="comment">// 从背包的最大容量开始，直到最低容量为当前物品的消耗为止</span></span><br><span class="line">      <span class="keyword">for</span>( <span class="keyword">int</span> j = v; j &gt;= nums[i]; j--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[j - nums[i]] + nums[i] &gt; v)&#123;<span class="comment">// 当容量为j时，放入当前物品是否会超出最大价值F </span></span><br><span class="line">          <span class="comment">// 如果超出了，则取只放入当前物品或者之前的方案中最大的结果</span></span><br><span class="line">          dp[j] = Math.max(dp[j], nums[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果没有超出，则取当前组合或者之前方案中最大的结果</span></span><br><span class="line">          dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断最后的结果是否出现价值为最大价值F的结果</span></span><br><span class="line">    <span class="keyword">return</span> dp[v] == v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>以[1,5,11,5]为例子，其中子集之和为sum/2=11,所以DP背包大小为11，而且最大值不能超过11。建立图标如下所示：</p><table><thead><tr><th>最后一个数</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>5</td><td>1</td><td>1</td><td>1</td><td>1</td><td>5</td><td>6</td><td>6</td><td>6</td><td>6</td><td>10</td><td>11</td><td>只需要判断这个数即可</td></tr><tr><td>11</td><td>1</td><td>1</td><td>1</td><td>1</td><td>5</td><td>6</td><td>6</td><td>6</td><td>6</td><td>6</td><td>11</td><td></td></tr><tr><td>5</td><td>1</td><td>1</td><td>1</td><td>1</td><td>5</td><td>6</td><td>6</td><td>6</td><td>6</td><td>6</td><td>6</td><td></td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td></td></tr><tr><td></td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>背包大小</td></tr></tbody></table><h2 id="LeetCode413-等差数列划分"><a href="#LeetCode413-等差数列划分" class="headerlink" title="LeetCode413-等差数列划分"></a>LeetCode413-<a href="https://leetcode-cn.com/problems/arithmetic-slices/" target="_blank" rel="noopener">等差数列划分</a></h2><blockquote><p>如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。</p><p>例如，以下数列为等差数列:</p><p>1, 3, 5, 7, 9<br>7, 7, 7, 7<br>3, -1, -5, -9<br>以下数列不是等差数列。</p><p>1, 1, 2, 5, 7</p><p>数组 A 包含 N 个数，且索引从0开始。数组 A 的一个子数组划分为数组 (P, Q)，P 与 Q 是整数且满足 0&lt;=P&lt;Q&lt;N 。</p><p>如果满足以下条件，则称子数组(P, Q)为等差数组：</p><p>元素 A[P], A[p + 1], …, A[Q - 1], A[Q] 是等差的。并且 P + 1 &lt; Q 。</p><p>函数要返回数组 A 中所有为等差数组的子数组个数。</p><p>示例:</p><p>A = [1, 2, 3, 4]</p><p>返回: 3, A 中有三个子等差数组: [1, 2, 3], [2, 3, 4] 以及自身 [1, 2, 3, 4]。</p></blockquote><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol><li>这题的特点是只要符合结果的数都必须增加放进去，而且每一个放进去的都是只能放一次。这就很符合01背包的定义了。通过分析可以知道:<ol><li>对于[1,2,3]来说，加入4变成[1,2,3,4]时，增加了[2,3,4]和[1,2,3,4]</li><li>对于[1,2,3,4]来说，加入5变成[1,2,3,4,5]时，增加了[3,4,5]、[2,3,4,5]和[1,2,3,4,5]</li><li>这就是有规律的，如果是等差数列的时候，每增加一个数，等差数列增加的数量就比前一个等差数列增加的数量多一个</li></ol></li><li>边界条件：数组个数少于3时不组成等差数列，直接返回0即可</li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 边界条件</span></span><br><span class="line">    <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length &lt; <span class="number">3</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用数组记录加入第i个数时，等差数列增加的数量</span></span><br><span class="line">    <span class="comment">// tips：此处可以使用一个变量即可</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">    <span class="keyword">int</span> slice = A[<span class="number">1</span>] - A[<span class="number">0</span>];<span class="comment">// 计算前两个数的差值</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">// 子数组的个数总和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> tmp = A[i] - A[i-<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> (slice == tmp) &#123;<span class="comment">// 当前两个数的差值等于前两个数的差值，组成等差数列</span></span><br><span class="line">        dp[i] = dp[i-<span class="number">1</span>] + <span class="number">1</span>;<span class="comment">// 第i个数新增的数组个数 = 第i-1新增的数组个数 + 1</span></span><br><span class="line">        sum += dp[i];<span class="comment">// 子数组的个数 = 前i-1个数的数组个数总和 + 第i个数加入后新增的数组个数</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dp[i] = <span class="number">0</span>;<span class="comment">// 当前两个数的差值与前两个数的差值不一致，从头开始计算</span></span><br><span class="line">        slice = tmp;<span class="comment">// 更新差值</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>以数组[1,2,3,4,8,9,10]为例，对应的图表如下所示，最后的结果只需要计算最后一行的总和即可。</p><table><thead><tr><th>对应为最后一个数</th><th>1</th><th>2</th><th>3</th><th>4</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>10</td><td>0</td><td>0</td><td>1</td><td>2</td><td>0</td><td>0</td><td>1</td></tr><tr><td>9</td><td>0</td><td>0</td><td>1</td><td>2</td><td>0</td><td>0</td><td></td></tr><tr><td>8</td><td>0</td><td>0</td><td>1</td><td>2</td><td>0</td><td></td><td></td></tr><tr><td>4</td><td>0</td><td>0</td><td>1</td><td>2</td><td></td><td></td><td></td></tr><tr><td>3</td><td>0</td><td>0</td><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>初始化</td><td>0</td><td>0</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="LeetCode213-打家劫舍-II"><a href="#LeetCode213-打家劫舍-II" class="headerlink" title="LeetCode213-打家劫舍 II"></a>LeetCode213-<a href="https://leetcode-cn.com/problems/house-robber-ii/" target="_blank" rel="noopener">打家劫舍 II</a></h2><blockquote><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><p>示例 1:</p><p>输入: [2,3,2]<br>输出: 3<br>解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。<br>示例 2:</p><p>输入: [1,2,3,1]<br>输出: 4<br>解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。<br>     偷窃到的最高金额 = 1 + 3 = 4 。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>由于这是一个环，意味着选择了第一个就不能选择最后一个，所以要分两种情况讨论：<ol><li>从第一个开始偷，那第一个就必须选。代表第2、3个的价值总和都是S1。然后以第i个作为结尾的时候，第i个不能偷，第i个的最大价值总和为Max(第i-1个的价值Wi-1+第i-2个的价值总和Si-2，第i-1个的价值总和Si-1)</li><li>从第2个开始偷，那第一个的价值总和为0，第二个的价值总和S2=W2。最后一个是可以偷的，所以第i个的价值总和为Max(第i个的价值Wi+第i-1个的价值总和Si-1，第i-1个的价值总和)</li></ol></li><li>边界条件：<ol><li>数组长度为0时直接返回0</li><li>数组长度为1时，直接返回数组中的数即可</li><li>数组长度为2时，直接返回数组中最大的那一个即可。因为第一种情况中</li></ol></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 边界条件</span></span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 边界条件</span></span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 边界条件</span></span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 从第一个开始偷，由于偷了第一个，所以第二个不可能偷。</span></span><br><span class="line">    <span class="comment">// 当第三个为最后一个时，也不偷第三个</span></span><br><span class="line">    dp[<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">2</span>] = dp[<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">3</span>] = dp[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= nums.length ; i++) &#123;</span><br><span class="line">      dp[i] = Math.max(nums[i - <span class="number">2</span>] + dp[i - <span class="number">2</span>], dp[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> value = dp[nums.length];</span><br><span class="line">    <span class="comment">// 第一个不偷</span></span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line">      dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(dp[nums.length], value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><ul><li>当数组为[4,1,2,7,5,3,1]时，从第一个开始偷的结果</li></ul><table><thead><tr><th>对应的最后一个数</th><th>4</th><th>1</th><th>2</th><th>7</th><th>5</th><th>3</th><th>1</th></tr></thead><tbody><tr><td>1</td><td>4</td><td>4</td><td>4</td><td>6</td><td>11</td><td>11</td><td>max(3+11,11)=14</td></tr><tr><td>3</td><td>4</td><td>4</td><td>4</td><td>6</td><td>11</td><td>max(5+6,11)=11</td><td></td></tr><tr><td>5</td><td>4</td><td>4</td><td>4</td><td>6</td><td>max(7+4,6)=11</td><td></td><td></td></tr><tr><td>7</td><td>4</td><td>4</td><td>4</td><td>max(2+4,4)=6</td><td></td><td></td><td></td></tr><tr><td>初始化</td><td>4</td><td>4</td><td>4</td><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li>从第二个开始偷的结果</li></ul><table><thead><tr><th>对应的最后一个数</th><th>4</th><th>1</th><th>2</th><th>7</th><th>5</th><th>3</th><th>1</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td><td>2</td><td>8</td><td>8</td><td>11</td><td>max(1+8,11)=11</td></tr><tr><td>3</td><td>0</td><td>1</td><td>2</td><td>8</td><td>8</td><td>max(3+8,8)=11</td><td></td></tr><tr><td>5</td><td>0</td><td>1</td><td>2</td><td>8</td><td>max(5+2,8)=8</td><td></td><td></td></tr><tr><td>7</td><td>0</td><td>1</td><td>2</td><td>max(7+1,2)=8</td><td></td><td></td><td></td></tr><tr><td>2</td><td>0</td><td>1</td><td>max(2+0,1)=2</td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>0</td><td>max(1+0,0)=1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>初始化</td><td>0</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>最后结果只需要取两个表最后一个数的最大值，此处是Max(11, 14)=14。</p><p>参考：</p><ul><li><a href="#">崔添翼. 背包问题九讲 2.0 beta1.2, 2012-05-08</a></li><li><a href="https://leetcode-cn.com/" target="_blank" rel="noopener">LeetCode. China</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文章主要是为了学习动态规划算法问题，这首先是进行对01背包问题进行学习。01背包问题是DP算法的基础，其他的完全背包都是从此基础上进行演进
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Jenkins+GitLab实现持续集成</title>
    <link href="https://blob.kitwahsin.cn/2020/04/27/Jenkins-GitLab%E5%AE%9E%E7%8E%B0%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>https://blob.kitwahsin.cn/2020/04/27/Jenkins-GitLab%E5%AE%9E%E7%8E%B0%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</id>
    <published>2020-04-26T17:11:48.000Z</published>
    <updated>2020-04-27T10:01:04.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>阿里云 Centos7 双核8G，并且这是在Docker上进行的</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker # 安装docker</span><br><span class="line">systemctl start docker # 启动docker</span><br><span class="line">docker search jenkins# 搜索</span><br><span class="line">docker pull jenkins/jenkins:lts# 安装镜像（建议到官网找最新的版本，否则可能出现其他问题）</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前用户下创建文件夹jenkins</span></span><br><span class="line">mkdir jenkins</span><br><span class="line">chmod -R 777 jenkins</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行(docker指令自行百度)</span></span><br><span class="line">docker run -itd -p 8091:8080 -p 8092:50000 --name jenkins --privileged=true -v ~/jenkins/:/var/jenkins_home jenkins</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行状态</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行结果</span></span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                             NAMES</span><br><span class="line">54f487e8570b        jenkins               "/bin/tini -- /usr/l…"   7 minutes ago       Up 59 seconds       0.0.0.0:8091-&gt;8080/tcp, 0.0.0.0:8092-&gt;50000/tcp   jenkins</span><br></pre></td></tr></table></figure><h2 id="首次运行配置"><a href="#首次运行配置" class="headerlink" title="首次运行配置"></a>首次运行配置</h2><ol><li>配置密码</li></ol><p>首次进入系统时会显示此界面，密码在<code>jenkins/secrets/initialAdminPassword</code>文件里，当设置好密码后，此文件会被删除</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200417220707821.png" alt="image-20200417220707821"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/jenkins/secrets/initialAdminPassword# 获取密码</span><br></pre></td></tr></table></figure><ol start="2"><li>安装插件</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200417221232314.png" alt="image-20200417221232314"></p><p>此处选择安装推荐的插件即可</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200417221401932.png" alt="image-20200417221401932"></p><ol start="3"><li>设置用户与密码</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200417225601957.png" alt="image-20200417225601957"></p><p>设置完成后就基本配置完成了。以后使用当前设置的账户即可登陆。</p><h2 id="配置环境与服务器"><a href="#配置环境与服务器" class="headerlink" title="配置环境与服务器"></a>配置环境与服务器</h2><ol><li>配置JDK与Gradle</li></ol><p>打开Manage Jenkins -&gt; Global Tool Configuration，然后看到JDK和Gradle并点击Installtion并进行配置。在此处我选择了安装Sum的JDK8和Gradle 6.0，因为我的项目是使用Gradle进行打包的。我们也可以根据路径指定当前系统中JDK、Maven等。</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425002243025.png" alt="image-20200425002243025"></p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425002257686.png" alt="image-20200425002257686"></p><ol start="2"><li>添加SSH服务器</li></ol><p>进入Manage Jenkins -&gt; System Configuration并找到Publish over SSH -&gt; SSH Servers选项，点击Add并进行配置。这个服务器在这里是作为打包测试通过之后发布的服务器。</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425002832843.png" alt="image-20200425002832843"></p><p>填写完成后点击Test Configuration进行测试，看是否能够连接成功。</p><h2 id="创建第一个项目"><a href="#创建第一个项目" class="headerlink" title="创建第一个项目"></a>创建第一个项目</h2><ol><li>点击主页面的New Item，填入名字并选择Freestyle project。</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425003208597.png" alt="image-20200425003208597"></p><ol start="2"><li>配置代码获取的方式，此处输入代码仓库的地址和账号等信息。同时还可以指定跟踪的分支，例如develop分支或者是master分支。</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425003607177.png" alt="image-20200425003607177"></p><ol start="3"><li><p>配置触发自动部署的条件，当达到一定的条件之后就可以触发Jenkins获取最新的代码进行打包、测试、部署等。因为我的GitLab服务器是能够访问到Jenkins服务器的，所以我选择在上传代码之后，通过Webhook触发部署。同时在此处点击Generate生成Secret token, 待会配置到GitLab服务器中。</p><blockquote><p>Jenkin支持的几种触发方式：</p><ol><li>通过远程触发(Trigger builds remotely)</li><li>在其他项目构建完成后出发(build after other projects are built)</li><li>周期性地进行检查(build periodically)</li><li>通过webhook进行触发(build when a change is pushed to GitLab)</li><li>定时检查源码变更情况，如有变更则触发(poll SCM)</li></ol></blockquote></li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004218750.png" alt="image-20200425004218750"></p><ol start="4"><li>配置打包的过程，可以通过执行Shell命令、调用Gradle脚本等进行打包。我这里使用的是Gradle脚本进行打包的。</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004241365.png" alt="image-20200425004241365"></p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004316870.png" alt="image-20200425004316870"></p><ol start="5"><li>最后可以配置打包成后所执行的步骤，此处配置的是打包测试成功后通过SSH发布。所以选择Send build artifacts over SSH。在SSH Server中选择刚刚配置的SSH Server即可。同时在transfer配置源文件等。这样在Jenkins中就已经配置完成了。</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004403298.png" alt="image-20200425004403298"></p><blockquote><p>Transfer Set</p><p>Source files: 指打包后需要发布的War包或者是Jar包</p><p>Remove prefix: 在Source files中，倘若填写的是/test/xx.jar，如果传到SSH服务器上指定的目录下，会自动创建test文件夹，并且xx.jar文件在test文件夹下。移除前缀就可以不用创建test文件夹</p><p>Remote directory: 登陆SSH后进入的目录</p><p>Exec command: 传输完文件后需要执行的命令</p></blockquote><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004457290.png" alt="image-20200425004457290"></p><ol start="6"><li>配置GitLab中的WebHook，进入项目的Setting -&gt; Intergrations 界面，填入配置Build Trigger中显示的URL与Secret Token，同时在下面选择触发条件。这个触发条件就是在什么条件下触发WebHook。</li></ol><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004613435.png" alt="image-20200425004613435"></p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004730148.png" alt=""></p><p>填写完成后点击Add webhook即可出现下面显示的一个条目。</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004838397.png" alt="image-20200425004838397"></p><p>点击Test下拉按钮能够显示多个事件，这个可以模拟上传代码、合并代码事件。这样就能够测试我们是否在上传的时候触发Jenkins的打包功能。</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425004855352.png" alt="image-20200425004855352"></p><p>如果成功了，点击Edit按钮滑动到底部，会看到一些回调信息已经发送成功的记录。当然，还是直接查看Jenkins是否已经触发了打包过程。我在测试的过程中就尝试过了，这里已经出现200的状态码，但是并没有触发打包。就是因为我在Jenkins配置的时候设置了一些过滤规则，过滤掉了。</p><p><img src="https://raw.githubusercontent.com/KitwahSin/KitwahSin.github.io/pictures/images/image-20200425005010500.png" alt="image-20200425005010500"></p><p>参考：</p><p><a href="https://blog.csdn.net/anzhuo5151/article/details/101786217?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">jenkins各种触发方式介绍</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;阿里云 Centos7 双核8G，并且这是在Docker上进行的&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="倘若图片无法加载，请百度解决GitHub网页githubusercontent地址无法访问问题。" scheme="https://blob.kitwahsin.cn/tags/%E5%80%98%E8%8B%A5%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%EF%BC%8C%E8%AF%B7%E7%99%BE%E5%BA%A6%E8%A7%A3%E5%86%B3GitHub%E7%BD%91%E9%A1%B5githubusercontent%E5%9C%B0%E5%9D%80%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98%E3%80%82/"/>
    
  </entry>
  
</feed>
